% This is a script to kick off a scan through image and signature directories.
% It results in compiled Training and Test sets

% add paths
addpath('code');
data_root = 'data/classifiers';

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Update the problems on disk
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Parameters to setting up Training & Test sets.
sig_dirs   = { ...
	'data/OrigSigData/computedInOME_AE/' ...
...	% Add more signature directories here.
};
training_perc  = .80; % when this variable is set to a whole number it means number of training imgs 
min_test_class_size = 20;
crossValidateRepeats = 10;
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Create/update the directories of training and test divisions
updateSplitDirs( sig_dirs, data_root, training_perc, crossValidateRepeats, min_test_class_size);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Initiate Training & Testing
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% set function parameters
classifier_dir   = 'code/Classifiers/';
sig_sets          = { ...
	'computedInOME_AE' ...
...	% Add more signature directories here.
};
results_path = fullfile( data_root, 'results.mat' );
% Train classifiers, generate predictions for both the test set and the 
% training set, and compile the results into a .mat file when done.

% UNCOMMENT line below to perform a scan only
% scan_opts.compile_results_only = 1;

% UNCOMMENT line below to use an artifact_correction_vector
scan_opts.artifact_correction_vector_path = ...
	'/iicbu/macurato/AGEMAP/Experiments/SKM/indNormalVector/individualityNormalizingVector_hande+.mat';
scanAndTrainAndTest(data_root, classifier_dir, sig_sets, results_path, [], scan_opts);

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Build a report
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
report_root  = 'reports';
results = loadResults( results_path );
% UNCOMMENT to make group classifications
%results = makeGroupClassifications(results, 16, 32);
[classDendrograms_rel_paths, sampleDendrograms_rel_paths] = report( results, report_root);

% Define Class-to-Class Distance functions for drawing dendrograms
classDistanceFunctionNames = { ...
	'Marginal Probability', ...
	'Class centroid', ...
	'Class density', ...
	'Class disjuction' ...
 };
classDistanceFunctions = { ...
	@getMPClassDist, ...
	@getMPClassCentroidDist, ...
	@getCSClassDist, ...
	@getDisjunctionClassDist ...
};

% UNCOMMENT the following two lines to render ClassBasedDendrograms
%reportClassBasedDendrograms(results, report_root, ...
%	classDendrograms_rel_paths, classDistanceFunctionNames, classDistanceFunctions);

% Define Sample-to-Sample Distance functions for drawing dendrograms
sampleDistanceFunctionNames = { ...
	'Marginal Probability space'}; %, ...
%	'Class Density space', ...
%	'Weighted Feature space', ...
%	'Raw Feature space', ...
%  };
sampleDistanceFunctions = { ...
	@getMPSampleDist}; %, ...
%	@getCSSampleDist, ...
%	@getWFSampleDist, ...
%	@getRFSampleDist ...
%  };

max_samples_to_use_in_histogram = 45*5;
num_splits = 3;
% UNCOMMENT the following three lines to render SamleBasedDendrograms
%reportSampleBasedDendrograms(results, report_root, ...
%	sampleDendrograms_rel_paths, sampleDistanceFunctionNames, sampleDistanceFunctions, ...
%	max_samples_to_use_in_histogram, num_splits);
	
%exit;
