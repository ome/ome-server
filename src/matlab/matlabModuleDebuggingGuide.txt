This is a preliminary procedural manual for debugging matlab modules in OME. It assumes you already have some preliminary knowledge about writing a module wrapper in xml. 

Debugging matlab modules in OME
------------------------------------------------

1) Install OME from CVS-HEAD with the Matlab handler. Instructions can be found at:
	http://www.openmicroscopy.org/install/matlab-connector.html
2) Set the dynamic library environment variable to the matlab mx libraries. Typically, you want to save this in your login initialization scripts.
	a) on OS X, this is something like:
		export DYLD_LIBRARY_PATH=/Applications/MATLAB7/bin/mac/
	b) on Red Hat, this is something like: 
		export LD_LIBRARY_PATH=/usr/local/matlab/bin/glnxa64/
3) Import a test image into a dataset by itself (using the Web UI)
4) Save this DB. Revert to this if you ever want to start clean.
	 sudo ome data backup -a ~/db_images_only -q

5) Import the standard matlab analysis modules
	# Go to the src/xml directory under your cvs checkout
	cd ~/OME/cvs/OME/src/xml
	perl install_classifier.pl
6) Make a "sandbox" directory for your experiments.
	mkdir classifier_sandbox
7) Copy the Haralick test chain to the sandbox directory, then import it.
	cp OME/Tests/ChebyshevFourierStatisticsChain.xml  classifier_sandbox
	ome import classifier_sandbox/ChebyshevFourierStatisticsChain.xml
8) Search for Analysis Chains in the Web UI to find the ID of this chain. In this example the id is 8
9) Convert that Chain into a "Signature chain". This generates a module & chain that are saved in your sandbox directory, and imported for you.
	ome help classifier stitch_chain
	ome classifier stitch_chain -a 8 -x ~/OME/cvs/OME/src/xml -o ~/OME/cvs/OME/src/xml/classifier_sandbox
10) Use the Web UI to find the ID of your new chain & of your test dataset. In this example, those are 9 and 1, respectively.
11) Execute the chain and save the results as a .mat file
	ome help classifier compile_sigs
	ome classifier compile_sigs -d 1 -a 9 -o classifier_sandbox/haralickSigs.mat
12) Load the .mat file in matlab, and compare its outputs to those produced by the matlab function when you run it on that image in matlab. e.g.
>> load haralickSigs.mat
>> im = imread( image_paths{1} );
>> addpath( genpath( '~/OME/cvs/OME/src/matlab/' ) );
>> coeff_packed = ChebyshevFourierTransform( im )
>> for i=1:length(signature_labels), fprintf( '%2.0f) %6.2f    %s\n', i, signature_matrix(i), signature_labels{i} ); end;

13) Now you have the technique mastered. Copy ChebyshevFourierStatisticsChain.xml, and modify it to use the module you have written instead of ChebyshevFourierStatistics. Redo steps 7-12. 

Hint: If you make a change to your module, you don't have to reload the DB. Instead you can rename your module (i.e. add "v2" to the end), give it a new LSID, update your chain, and reimport things. If you do that, OME will treat it as a new module and chain. This can potentially save time when fine-tuning execution instructions.




Integrating a module into the full signature chain
------------------------------------------------

1) Open the Signature Chain Diagram
	OME/src/xml/OME/Analysis/Classifier/SignatureChainDiagram.ome
2) Add your module to the chain. Look at existing nodes for examples of syntax and such. Copy & Past as much as possible.
3) Expand the diagram into a valid chain.
	ome help lint untangle_chains
	ome lint untangle_chains -f OME/Analysis/Classifier/SignatureChainDiagram.ome -o classifier_sandbox/SignatureCalcChainV2.ome
4) Import this chain and use the Web UI to find it's id
5) Convert the chain into a true signature chain (this generates a "Stitcher module" for the chain.)
	ome classifier stitch_chain -a [CHAIN ID] -x ~/OME/cvs/OME/src/xml -o ~/OME/cvs/OME/src/xml/classifier_sandbox
6) Test the new signature chain. If it works, copy it to the SignatureChain file and commit it to cvs.
	# if testing passes....
	cp classifier_sandbox/AutogeneratedSignaturechainX.X.ome OME/Analysis/Classifier/SignatureChain.ome
	
	
