/*
 * org.openmicroscopy.imageviewer.util.Filter
 *
 *------------------------------------------------------------------------------
 *
 *  Copyright (C) 2003 Open Microscopy Environment
 *      Massachusetts Institute of Technology,
 *      National Institutes of Health,
 *      University of Dundee
 *
 *
 *
 *    This library is free software; you can redistribute it and/or
 *    modify it under the terms of the GNU Lesser General Public
 *    License as published by the Free Software Foundation; either
 *    version 2.1 of the License, or (at your option) any later version.
 *
 *    This library is distributed in the hope that it will be useful,
 *    but WITHOUT ANY WARRANTY; without even the implied warranty of
 *    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 *    Lesser General Public License for more details.
 *
 *    You should have received a copy of the GNU Lesser General Public
 *    License along with this library; if not, write to the Free Software
 *    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 *------------------------------------------------------------------------------
 */




/*------------------------------------------------------------------------------
 *
 * Written by:    Jeff Mellen <jeffm@alum.mit.edu>
 *
 *------------------------------------------------------------------------------
 */
package org.openmicroscopy.imageviewer.util;

import java.util.*;


/**
 * @author Jeff Mellen, <a href="mailto:jeffm@alum.mit.edu">jeffm@alum.mit.edu</a>
 * @version $ Revision: $ $ Date: $
 */
public class Filter
{
  /**
   * Applies the "map" operator (like in Perl) to the specified objects.
   * The "execute" method in the MapOperator is applied to each object in the
   * list, and a list of objects is returned with the values generated by
   * MapOperator.  If the execute() method mutates objects, then those effects
   * will be applied to each object in the list.  The return list will be the
   * return values.
   * 
   * @param objects The objects to apply the operator to.
   * @param operator The operator to apply to the objects.
   * @return A list of return values from operator.execute().
   * @modifies potentially, depending on operator, the elements of objects.
   */
  public static List map(List objects, MapOperator operator)
  {
    if(objects == null)
    {
      return null;
    }
    else if(operator == null)
    {
      return objects;
    }
    
    List list = new ArrayList();
    for(Iterator iter = objects.iterator(); iter.hasNext();)
    {
      list.add(operator.execute(iter.next()));
    }
    return list;
  }
  
  /**
   * Applies the "grep" operator (like in Perl) to the specified objects.
   * The "eval" method in the GrepOperator is applied to each object in the
   * list, and the list of objects which satisfy the criteria in the operator
   * is returned.  The eval() method SHOULD NOT mutate objects, but if it
   * does, the changes will be be applied to the original objects, as in map.
   * 
   * @param objects The objects to filter.
   * @param operator The criteria by which to filter the objects.
   * @return The objects which satisfy the criteria established in operator.
   */
  public static List grep(List objects, GrepOperator operator)
  {
    if(objects == null)
    {
      return null;
    }
    else if(operator == null)
    {
      return null;
    }
    
    List list = new ArrayList();
    for(Iterator iter = objects.iterator(); iter.hasNext();)
    {
      Object target = iter.next();
      if(operator.eval(target))
      {
        list.add(target);
      }
    }
    return list;
  }
}
