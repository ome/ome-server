The distributed AE works using three classes:
	OME::Analysis::Engine::SimpleWorkerExecutor
		implements the OME::Analysis::Engine::Executor interface
	OME::Analysis::Engine::Worker
		a DBObject to maintain a list of workers available to the back-end
	OME/Analysis/Engine/NonblockingSlaveWorkerCGI.pl
		a worker implemented as a non-blocking CGI script

To set it up, you will need to do the following:

* Manually populate the analysis_workers table with url and status (set to
'IDLE') for each worker on each node.  A node that hosts more than one worker
needs an entry in this table for every worker it has.  The URL should execute
OME/Analysis/Engine/NonblockingSlaveWorkerCGI.pl
as a mod_perl CGI

* On each worker node, you must set the maximum workers that that node can host
by running OME/Analysis/Engine/install_worker_node.pl as root.

* This is very temporary, but currently the back-end's data-source is
hard-coded in OME/Analysis/Engine/SimpleWorkerExecutor.pm:
use constant DATA_SOURCE     => 'dbi:Pg:dbname=ome;host=localhost';

The 'host' part needs to be changed to the FQDN of your back-end unless you
will only run localhost workers.

* Finally, if you will be using remote workers, you will need to configure
pg_hba.conf which lives on the back-end in pgsql/data/ (the postgres 'home') to
allow the remote workers to connect to your DB.  Usually a trusted
authentication from specified IPs is sufficient:

host       ome         127.0.0.1     255.255.255.255    trust
replace 127.0.0.1 with the IP address of your worker.

* And lastly, the OME::Analysis::Engine::SimpleWorkerExecutor is selected as
the executor by setting the OME_DISTRIBUTED environment variable.  If that's
not convenient, you can change how this is done in:
OME/Analysis/Engine/Executor.pm

As this gets incorporated into the system more, these steps will gradually
disappear.
