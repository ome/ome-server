# OME/Install/MaintenanceTasks
# This task builds the required libraries for the OME system.

#-------------------------------------------------------------------------------
#
# Copyright (C) 2003 Open Microscopy Environment
#       Massachusetts Institute of Technology,
#       National Institutes of Health,
#       University of Dundee
#
#
#
#    This library is free software; you can redistribute it and/or
#    modify it under the terms of the GNU Lesser General Public
#    License as published by the Free Software Foundation; either
#    version 2.1 of the License, or (at your option) any later version.
#
#    This library is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    Lesser General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public
#    License along with this library; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#-------------------------------------------------------------------------------

package OME::Install::MaintenanceTask;

#*********
#********* INCLUDES
#*********

use strict;
use warnings;
use Carp;
use English;
use Cwd;
use Term::ANSIColor qw(:constants);
use Term::ReadKey;
use Text::Wrap;

use File::Basename;
use File::Copy;
use OME::Install::Util;
use OME::Install::Terminal;
use OME::Install::Environment;

# Environment and users
our $ENVIRONMENT;
our $OME_USER;
our $APACHE_USER;
our $POSTGRES_USER;
our $MAINT_CONF;
our $APACHE_CONF;
our $OME_TMP_DIR;
our $OME_BASE_DIR;
our $OMEIS_BASE_DIR;

# Global logfile filehandle and name
our $LOGFILE_NAME = "MaintenanceTask.log";
our $LOGFILE;

# Default tasks
our $MAINT_CONF_DEF = {
	do_it       => 1,
	omeadmin    => 1,
	t_vacuum    => '00:00', # midnight.  undef to not do it.
	t_compress  => '00:00',
	t_purge     => '00:00',
	file_comp   => '30', # days
	pix_comp    => '60', # days
	pix_purge   => '90', # days
};



# Determine if we can write the crontab - i.e. if the installer wrote it to begin with.
# Crontabs that the installer installs have the following signature:
# Installed by OME Installer for user [user] on [date].
# If we find a crontab for the given user that is missing this signature
# then we return undef, and we will not over-write it.
# If we find the signature, we are free to over-write the crontab and return true (1).
# There is a warning comment in the crontab preceding these signature lines that
# this is what will happen.
sub can_write_crontab {
my $user = shift;
my $no_crontab = qr/no crontab for $user$/;
my $gotSig;
my $gotError;

	if (open (CRONTAB,"crontab -u $user -l 2>&1 |")) {
		while (<CRONTAB>) {
			if (/^# Installed by OME Installer for user \S+ on /) {
				$gotSig = 1;
				last;
			}
			if (/$no_crontab/) {
				$gotError = 1;
				last;
			}
		}
	}
	close (CRONTAB);
	return ($gotSig or $gotError);
}

# This returns a string with the user's current crontab
sub get_user_crontab {
my $user = shift;
my $no_crontab = qr/no crontab for $user$/;
my $gotSig;
my $gotError;
my $crontab='';

	if (open (CRONTAB,"crontab -u $user -l 2>&1 |")) {
		while (<CRONTAB>) {
			if (/$no_crontab/) {
				$gotError = 1;
				last;
			} else {
				$crontab .= $_;
			}
		}
	}
	close (CRONTAB);
	undef $crontab if $gotError;
	return ($crontab);
}

sub get_crontab {
my $user = shift;
my @scripts = @_;
my $date = scalar CORE::localtime;

my $crontab = <<CRONTAB;
# This crontab was generated by the OME installer.  If you modify it, your changes will be lost.
# If you remove or alter the following comment, the OME Installer will not over-write this crontab.
# Installed by OME Installer for user $user on $date
CRONTAB
	foreach (@scripts) {
		my ($hour,$minute) = split (/:/,$_->[0]);
		$hour = sprintf ("%d",$hour);
		$minute = sprintf ("%d",$minute);
		my $command = $_->[1];
		$crontab .= "$minute $hour * * * $command\n";
	}
	
	return $crontab;
}

sub set_crontab {
my $user = shift;
my $crontab = shift;
my $CRONTAB;

    open ($CRONTAB, ">", "$OME_TMP_DIR/install/crontab.tmp");
    print $CRONTAB $crontab;
    close ($CRONTAB);
    
    system ('crontab','-u',$user, "$OME_TMP_DIR/install/crontab.tmp");
    unlink ("$OME_TMP_DIR/install/crontab.tmp");
}


# Some of these scripts have embedded variables of the form %VAR_NAME%
# The scripts live in src/crontab/ and get moved to $OME_BASE_DIR
sub fix_cron_scripts {
	my $script_dir = getcwd().'/src/crontab';
	my $install_dir = "$OME_BASE_DIR/crontab";
	my $ome_bin = "$OME_BASE_DIR/bin";
	my @lines;
	my $file;
	
	my $pix_comp = $MAINT_CONF->{pix_comp};
	my $file_comp = $MAINT_CONF->{file_comp};
	my $pix_purge = $MAINT_CONF->{pix_purge};

	my @files = glob ("$script_dir/*");
	my $subs = {
		PIX_COMP   => $pix_comp,
		FILE_COMP  => $file_comp,
		PIX_PURGE  => $pix_purge,
		OME_BIN    => $ome_bin,
		OMEIS_BASE => $OMEIS_BASE_DIR,
	};

	my ($key,$val);
	print $LOGFILE "Fixing crontabs \n";
	while ( ($key,$val) = each (%$subs) ) {
		print $LOGFILE "Replacing %$key% with $val\n";
	}

	foreach $file (@files) {
		next unless -f $file;
		print $LOGFILE "Reading $file\n";
		open(FILE, "<", $file) or
			print $LOGFILE "Can't open $file for reading: $!\n" and
			croak "Can't open $file for reading: $!";
		@lines = <FILE>;
		close (FILE);
		my $config = join ('',@lines);
		while ( ($key,$val) = each (%$subs) ) {
			$config =~ s/%$key%/$val/mg;
		}
		$file =~ s/$script_dir/$install_dir/;
		print $LOGFILE "Writing $file\n";
		open(FILE, "> $file") or
			print $LOGFILE "Can't open $file for writing: $!" and
			croak "Can't open $file for writing: $!";
		print FILE $config;
		close (FILE);
		chmod (0775,$file) or
			print $LOGFILE "Could not chmod $file: $!\n" and
			croak "Could not chmod $file: $!";

	}
	return (1);
}


sub execute {
my ($hour,$minute);
	$ENVIRONMENT = initialize OME::Install::Environment;
	$OME_USER = $ENVIRONMENT->user()
    	or croak "Unable to retrieve OME_USER!";
	$APACHE_USER = $ENVIRONMENT->apache_user()
		or croak "Unable to retrieve APACHE_USER!";
	$POSTGRES_USER = $ENVIRONMENT->postgres_user()
		or croak "Unable to retrieve POSTGRES_USER!";
    $OME_TMP_DIR  = $ENVIRONMENT->tmp_dir() or croak "Unable to retrieve OME_TMP_DIR!";
    $OME_BASE_DIR = $ENVIRONMENT->base_dir() or croak "Could not get base installation environment\n";
    $OMEIS_BASE_DIR = $ENVIRONMENT->omeis_base_dir() or croak "Could not get OMEIS base directory\n";


	$MAINT_CONF = $ENVIRONMENT->cron_conf();
	
	# Get any undefined keys from the default.
	foreach (keys %$MAINT_CONF_DEF) {
		$MAINT_CONF->{$_} = $MAINT_CONF_DEF->{$_} unless exists $MAINT_CONF->{$_};
	}
	
	# Turn off OMEIS tasks if we didn't install OMEIS
	$APACHE_CONF = $ENVIRONMENT->apache_conf()
		or croak "Unable to retreive Apache configuration from the stored ome install environment!";
	if (not $APACHE_CONF->{OMEIS}) {
		$MAINT_CONF->{t_compress} = undef;
		$MAINT_CONF->{t_purge}    = undef;
	}

	print "\n";  # Spacing
    print_header ("Periodic Maintenance Tasks (Cron)");
    print "(All verbose information logged in $OME_TMP_DIR/install/$LOGFILE_NAME)\n\n";

	# Task blurb
	my $blurb = <<BLURB;
OME needs to run periodic tasks to maintain optimum performance.
The database needs to be vacuumed and analyzed to maintain its query 
optimizer and prevent it from becoming sluggish as it grows. OMEIS can 
optimize disk space useage by compressing files and pixels that have not 
been accessed recently. OMEIS can also purge pixels if they are derived 
from original files stored on OMEIS. All of these tasks place a 
considerable burden on the server, and it is best to run them when the 
server is not being heavily used. If you are unsure of a particular 
question, please choose the default as that will be more than adequate
for most people.
BLURB

	print wrap("", "", $blurb);
	print "\n";  # Spacing

    # Get our logfile and open it for writing
    open ($LOGFILE, ">", "$OME_TMP_DIR/install/$LOGFILE_NAME")
    or croak "Unable to open logfile \"$OME_TMP_DIR/install/$LOGFILE_NAME\" $!";
    
    print $LOGFILE "Setup Maintenance tasks\n";


	# Confirm all flag
	my $confirm_all;

    while (1) {
	
		# Logical consistency checks
		undef $MAINT_CONF->{t_compress} unless $MAINT_CONF->{file_comp} or $MAINT_CONF->{pix_comp};
		undef $MAINT_CONF->{t_purge}  unless $MAINT_CONF->{pix_purge};
		$MAINT_CONF->{do_it} = 0  unless $MAINT_CONF->{t_vacuum} or $MAINT_CONF->{t_compress} or $MAINT_CONF->{t_purge};

		if ($ENVIRONMENT->get_flag("UPDATE") or $confirm_all) {
			print "\n";  # Spacing

			# Ask user to confirm original entries
	
			print BOLD,"Maintenance tasks:\n",RESET;
			print "     Install the OME admin utility?: ", BOLD, $MAINT_CONF->{omeadmin}     ? 'yes':'no', RESET, "\n";
			print "Install periodic maintenance tasks?: ", BOLD, $MAINT_CONF->{do_it}     ? 'yes':'no', RESET, "\n";
			print "           Database vacuum/analyze?: ", $MAINT_CONF->{t_vacuum}  ? "Daily at ".BOLD.$MAINT_CONF->{t_vacuum}.RESET  :BOLD.'no'.RESET,"\n";
			print "              Compress OMEIS Files?: ", ($MAINT_CONF->{file_comp} and $MAINT_CONF->{t_compress}) ? "Daily at ".BOLD.$MAINT_CONF->{t_compress}.RESET:BOLD.'no'.RESET,"\n";
			print "             Compress OMEIS Pixels?: ", ($MAINT_CONF->{pix_comp}  and $MAINT_CONF->{t_compress}) ? "Daily at ".BOLD.$MAINT_CONF->{t_compress}.RESET:BOLD.'no'.RESET,"\n";
			print "                Purge OMEIS Pixels?: ", $MAINT_CONF->{t_purge} ? "Daily at ".BOLD.$MAINT_CONF->{t_purge}.RESET   :BOLD.'no'.RESET,"\n";
			print "Unaccessed ",BOLD,"Files",RESET,"  get ",BOLD,"compressed",RESET," after ", BOLD, $MAINT_CONF->{file_comp}, RESET, " Days\n"
				if $MAINT_CONF->{file_comp};
			print "Unaccessed ",BOLD,"Pixels",RESET," get ",BOLD,"compressed",RESET," after ", BOLD, $MAINT_CONF->{pix_comp},  RESET, " Days\n"
				if $MAINT_CONF->{pix_comp};
			print "Unaccessed ",BOLD,"Pixels",RESET," get ",BOLD,"purged",RESET,"     after ", BOLD, $MAINT_CONF->{pix_purge}, RESET, " Days\n"
				if $MAINT_CONF->{pix_purge};

			print "\n";  # Spacing
			y_or_n ("Are these values correct ?",'y') and last;
		}

		$confirm_all = 0;
		if (y_or_n ('Install the OME admin utility (omeadmin)?','y') ){
			$MAINT_CONF->{omeadmin} = 1;
		} else {
			$MAINT_CONF->{omeadmin} = 0;
		}
		
		if (! y_or_n('Configure Maintenance tasks?','y') ) {
			$MAINT_CONF->{do_it} = 0;
			redo;
		}
		$MAINT_CONF->{do_it} = 1;

		#******** Set vacuum/analyze
		if (! y_or_n('Run daily Database vacuum/analyze script?','y') ) {
			$MAINT_CONF->{t_vacuum}  = undef;
		} else {
			$MAINT_CONF->{t_vacuum} = $MAINT_CONF_DEF->{t_vacuum} unless $MAINT_CONF->{t_vacuum};
			$MAINT_CONF->{t_vacuum} = confirm_default ('Time at which to run database vacuum/analyze script (24 hr clock):',$MAINT_CONF->{t_vacuum});
			($hour,$minute) = ($1,$2) if $MAINT_CONF->{t_vacuum} =~ /(\d+):(\d+)/;
			$hour   = '00' unless defined $hour and $hour > 0 and $hour < 24;
			$minute = '00' unless defined $minute and $minute > 0 and $minute < 60;
			$MAINT_CONF->{t_vacuum} = "$hour:$minute";
		}

		#******** Set compress
		if (! y_or_n('Run daily OMEIS compression script?','y') ) {
			$MAINT_CONF->{t_compress}  = undef;
			$MAINT_CONF->{file_comp} = undef;
			$MAINT_CONF->{pix_comp} = undef;
		} else {
			$MAINT_CONF->{t_compress} = $MAINT_CONF_DEF->{t_compress} unless $MAINT_CONF->{t_compress};
			$MAINT_CONF->{t_compress} = confirm_default ('Time at which to run OMEIS compression script (24 hr clock):',$MAINT_CONF->{t_compress});
			($hour,$minute) = ($1,$2) if $MAINT_CONF->{t_compress} =~ /(\d+):(\d+)/;
			$hour   = '00' unless defined $hour and $hour > 0 and $hour < 24;
			$minute = '00' unless defined $minute and $minute > 0 and $minute < 60;
			$MAINT_CONF->{t_compress} = "$hour:$minute";

			$MAINT_CONF->{file_comp} = $MAINT_CONF_DEF->{file_comp} unless $MAINT_CONF->{file_comp};
			$MAINT_CONF->{file_comp} = confirm_default ("Compress Files  not accessed for how many days (0=never compress)?:",$MAINT_CONF->{file_comp});
			$MAINT_CONF->{pix_comp} = $MAINT_CONF_DEF->{pix_comp} unless $MAINT_CONF->{pix_comp};
			$MAINT_CONF->{pix_comp}  = confirm_default ("Compress Pixels not accessed for how many days (0=never compress)?:",$MAINT_CONF->{pix_comp});
			if (not ($MAINT_CONF->{file_comp} or $MAINT_CONF->{pix_comp})) {
				print "Never compress either Files or Pixels.  Will not run compression script.\n";
				$MAINT_CONF->{t_compress}  = undef;
			}
		}

		#******** Set purge
		if (! y_or_n('Run daily OMEIS Pixels purge script?','y') ) {
			$MAINT_CONF->{t_purge}  = undef;
		} else {
			$MAINT_CONF->{t_purge} = $MAINT_CONF_DEF->{t_purge} unless $MAINT_CONF->{t_purge};
			$MAINT_CONF->{t_purge} = confirm_default ('Time at which to run OMEIS Pixels purge script (24 hr clock):',$MAINT_CONF->{t_purge});
			($hour,$minute) = ($1,$2) if $MAINT_CONF->{t_purge} =~ /(\d+):(\d+)/;
			$hour   = '00' unless defined $hour and $hour > 0 and $hour < 24;
			$minute = '00' unless defined $minute and $minute > 0 and $minute < 60;
			$MAINT_CONF->{t_purge} = "$hour:$minute";

			$MAINT_CONF->{pix_purge} = $MAINT_CONF_DEF->{pix_purge} unless $MAINT_CONF->{pix_purge};
			$MAINT_CONF->{pix_purge}  = confirm_default ("Purge Pixels not accessed for how many days (0=never purge)?:",$MAINT_CONF->{pix_purge});
			if (not $MAINT_CONF->{pix_purge}) {
				print "Never purge Pixels.  Will not run purge script.\n";
				$MAINT_CONF->{t_purge}  = undef;
			}
		}
		$confirm_all = 1;

	}

	$ENVIRONMENT->cron_conf($MAINT_CONF);

	# Write what we got to our log
	print $LOGFILE "Maintenance tasks:\n";
	print $LOGFILE "     Install the OME admin utility?: ", $MAINT_CONF->{omeadmin}  ? 'yes':'no', "\n";
	print $LOGFILE "Install periodic maintenance tasks?: ", $MAINT_CONF->{do_it}     ? 'yes':'no', "\n";
	print $LOGFILE "           Database vacuum/analyze?: ", $MAINT_CONF->{t_vacuum}  ? "Daily at ".$MAINT_CONF->{t_vacuum}  :'no',"\n";
	print $LOGFILE "              Compress OMEIS Files?: ", ($MAINT_CONF->{file_comp} and $MAINT_CONF->{t_compress}) ? "Daily at ".$MAINT_CONF->{t_compress}:'no',"\n";
	print $LOGFILE "             Compress OMEIS Pixels?: ", ($MAINT_CONF->{pix_comp}  and $MAINT_CONF->{t_compress}) ? "Daily at ".$MAINT_CONF->{t_compress}:'no',"\n";
	print $LOGFILE "                Purge OMEIS Pixels?: ", $MAINT_CONF->{t_purge} ? "Daily at ".$MAINT_CONF->{t_purge}   :'no',"\n";
	print $LOGFILE "Unaccessed Files get  compressed after ",  $MAINT_CONF->{file_comp}, " Days\n"
		if $MAINT_CONF->{file_comp};
	print $LOGFILE "Unaccessed Pixels get compressed after ",  $MAINT_CONF->{pix_comp}, " Days\n"
		if $MAINT_CONF->{pix_comp};
	print $LOGFILE "Unaccessed Pixels get purged after ",  $MAINT_CONF->{pix_purge}, " Days\n"
		if $MAINT_CONF->{pix_purge};

	# Regardless of wether or not we install any crontabs, we're still going to copy the scripts
	fix_cron_scripts();

	#
	# Install omeadmin, if appropriate
	#
	if ($MAINT_CONF->{omeadmin} == 1) {
		copy(getcwd()."/src/util/omeadmin", "$OME_BASE_DIR/bin/omeadmin") or
			print $LOGFILE "Could not copy src/util/omeadmin to $OME_BASE_DIR/bin/omeadmin: $!\n" and
			croak "Could not copy src/util/omeadmin to $OME_BASE_DIR/bin/omeadmin: $!";
		print $LOGFILE "copied src/util/omeadmin to $OME_BASE_DIR/bin/omeadmin\n";
		chmod(0755,"$OME_BASE_DIR/bin/omeadmin") or
			print $LOGFILE "Could not chmod $OME_BASE_DIR/bin/omeadmin: $!\n" and
			croak "Could not chmod $OME_BASE_DIR/bin/omeadmin: $!";
		print $LOGFILE "chmod 0755 $OME_BASE_DIR/bin/omeadmin\n";
	}
	
	# Return unless we're actually going to do something.
	unless ($MAINT_CONF->{do_it}) {
		print $LOGFILE "Not setting up Maintenance tasks\n";
		# Set a proper umask
		print "Dropping umask to ", BOLD, "\"0002\"", RESET, ".\n";
		umask (0002);
		close ($LOGFILE);
		return;
	}
	
	#
	# Do the $POSTGRES_USER thing.
	#
	if ($MAINT_CONF->{t_vacuum}) {
		print "Writing crontab for $POSTGRES_USER ";
		my @scripts;
		push (@scripts,[$MAINT_CONF->{t_vacuum},"$OME_BASE_DIR/crontab/vacuumdb"]);
		my $crontab = get_crontab ($POSTGRES_USER,@scripts);
		if ( can_write_crontab ($POSTGRES_USER) ){
			set_crontab ($POSTGRES_USER,$crontab);
			print $LOGFILE "Set crontab for $POSTGRES_USER to:\n$crontab\n";
			print BOLD, "[SUCCESS]", RESET, ".\n";
		} else {
			print BOLD, "[FAILURE]", RESET, ".\n";
			my $user_crontab = get_user_crontab ($POSTGRES_USER);
			print $LOGFILE "Could not write crontab for $POSTGRES_USER due to interfering crontab:\n$user_crontab\n\n";
			print $LOGFILE "Was going to write crontab:\n$crontab\n";
			print BOLD,"WARNING: ",RESET,<<WARNING;
Can't write a crontab for user $POSTGRES_USER.
A crontab for this user already exists, and it was not generated by the OME installer:
vvvvvvvvvvvvvvvvvvvv
$user_crontab\n
^^^^^^^^^^^^^^^^^^^^

As root, you can remove this crontab (if you are sure you know what you're doing) with:
# crontab -u $POSTGRES_USER -r
The crontab we were going to install is:
vvvvvvvvvvvvvvvvvvvv
$crontab
^^^^^^^^^^^^^^^^^^^^

*****  The database vacuum/analyze script will not be installed! *****
WARNING
			y_or_n ("Ready to proceed?",'y');
		}
	}

	#
	# Do the $APACHE_USER thing.
	#
	if ($MAINT_CONF->{t_compress} or $MAINT_CONF->{t_purge}) {
		print "Writing crontab for $APACHE_USER ";
		my @scripts;
		push (@scripts,[$MAINT_CONF->{t_compress},"$OME_BASE_DIR/crontab/compressOMEIS"]) if $MAINT_CONF->{t_compress};
		push (@scripts,[$MAINT_CONF->{t_purge},"$OME_BASE_DIR/crontab/purgeOMEIS"]) if $MAINT_CONF->{t_purge};
		my $crontab = get_crontab ($APACHE_USER,@scripts);
		if ( can_write_crontab ($APACHE_USER) ){
			set_crontab ($APACHE_USER,$crontab);
			print $LOGFILE "Set crontab for $APACHE_USER to:\n$crontab\n";
			print BOLD, "[SUCCESS]", RESET, ".\n";
		} else {
			print BOLD, "[FAILURE]", RESET, ".\n";
			my $user_crontab = get_user_crontab ($APACHE_USER);
			print $LOGFILE "Could not write crontab for $APACHE_USER due to interfering crontab:\n$user_crontab\n\n";
			print $LOGFILE "Was going to write crontab:\n$crontab\n";
			print BOLD,"WARNING: ",RESET,<<WARNING;
Can't write a crontab for user $APACHE_USER.
A crontab for this user already exists, and it was not generated by the OME installer:
vvvvvvvvvvvvvvvvvvvv
$user_crontab\n
^^^^^^^^^^^^^^^^^^^^

As root, you can remove this crontab (if you are sure you know what you're doing) with:
# crontab -u $APACHE_USER -r
The crontab we were going to install is:
vvvvvvvvvvvvvvvvvvvv
$crontab
^^^^^^^^^^^^^^^^^^^^

*****  The OMEIS disk space recovery scripts will not be installed! *****
WARNING
			y_or_n ("Ready to proceed?",'y');
		}
	}


	#
	# Clean up and return
	#
	print $LOGFILE "Maintenance tasks configuration finished.\n";
	# Set a proper umask
	print "Dropping umask to ", BOLD, "\"0002\"", RESET, ".\n";
	umask (0002);
	close ($LOGFILE);
	return;
}

1;