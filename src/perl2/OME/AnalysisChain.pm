# OME/AnalysisChain.pm

# Copyright (C) 2003 Open Microscopy Environment
# Author:  Douglas Creager <dcreager@alum.mit.edu>
#
#    This library is free software; you can redistribute it and/or
#    modify it under the terms of the GNU Lesser General Public
#    License as published by the Free Software Foundation; either
#    version 2.1 of the License, or (at your option) any later version.
#
#    This library is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    Lesser General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public
#    License along with this library; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA


package OME::AnalysisChain;

=head1 NAME

OME::AnalysisChain - an module_execution chain

OME::AnalysisChain::Node - a node in the module_execution chain

OME::AnalysisChain::Link - a link connecting two nodes in the chain

=head1 DESCRIPTION

The C<AnalysisView> class represents module_execution chains in OME.  Each
chain is a directed acyclic graph.  The nodes of the chain represent
analysis modules that must get executed.  The links of the chain
connect outputs of one node to inputs of another; they specify the
order in which modules are executed and the relationship between the
data generated by the nodes.  The nodes are represented by the
C<AnalysisView::Node> class; the links by the C<AnalysisView::Link>
class.

=cut

use strict;
our $VERSION = 2.000_000;

use OME::DBObject;
use base qw(OME::DBObject);

__PACKAGE__->newClass();
__PACKAGE__->setDefaultTable('analysis_chains');
__PACKAGE__->setSequence('analysis_chain_seq');
__PACKAGE__->addPrimaryKey('analysis_chain_id');
__PACKAGE__->addColumn(owner_id => 'owner',
                       {
                        SQLType => 'integer',
                        NotNull => 1,
                        Indexed => 1,
                        ForeignKey => 'experimenters',
                       });
__PACKAGE__->addColumn(name => 'name',
                       {
                        SQLType => 'varchar(64)',
                        NotNull => 1,
                       });
__PACKAGE__->addColumn(description => 'description',{SQLType => 'text'});
__PACKAGE__->addColumn(locked => 'locked',
                       {
                        SQLType => 'boolean',
                        NotNull => 1,
                        Default => 'false',
                       });
__PACKAGE__->hasMany('nodes',
                     'OME::AnalysisChain::Node' => 'analysis_chain');
__PACKAGE__->hasMany('links',
                     'OME::AnalysisChain::Link' => 'analysis_chain');
__PACKAGE__->hasMany('paths',
                     'OME::AnalysisPath' => 'analysis_chain');

=head1 METHODS (C<AnalysisView>)

The following methods are available to C<AnalysisView> in addition to
those defined by L<OME::DBObject>.

=head2 owner

	my $owner = $chain->owner();
	$chain->owner($owner);

Returns or sets the owner of this module_execution chain.

=head2 name

	my $name = $chain->name();
	$chain->name($name);

Returns or sets the name of this module_execution chain.

=head2 locked

	my $locked = $chain->locked();
	$chain->locked($locked);

Returns or sets whether this module_execution chain is locked.

=head2 description

	my $description = $chain->description();
	$chain->description($description);

Returns or sets the description of this module_execution chain.

=head2 nodes

	my @nodes = $chain->nodes();
	my $node_iterator = $chain->nodes();

Returns or iterates, depending on context, the nodes in the module_execution
chain.

=head2 links

	my @links = $chain->links();
	my $link_iterator = $chain->links();

Returns or iterates, depending on context, the links in the module_execution
chain.

=head2 paths

	my @paths = $chain->paths();
	my $path_iterator = $chain->paths();

Returns or iterates, depending on context, the data paths in the
analysis chain.

=cut

sub owner {
    my $self = shift;
    if (@_) {
        my $attribute = shift;
        $attribute->verifyType('Experimenter');
        $self->owner_id($attribute->id());
        return undef;
    } else {
        return $self->Session()->Factory()->loadAttribute("Experimenter",
                                                          $self->owner_id());
    }
}



package OME::AnalysisChain::Node;

use strict;
our $VERSION = 2.000_000;

use OME::DBObject;
use base qw(OME::DBObject);

__PACKAGE__->newClass();
__PACKAGE__->setDefaultTable('analysis_chain_nodes');
__PACKAGE__->setSequence('analysis_chain_nodes_seq');
__PACKAGE__->addPrimaryKey('analysis_chain_node_id');
__PACKAGE__->addColumn(analysis_chain_id => 'analysis_chain_id');
__PACKAGE__->addColumn(analysis_chain => 'analysis_chain_id',
                       'OME::AnalysisChain',
                       {
                        SQLType => 'integer',
                        NotNull => 1,
                        Indexed => 1,
                        ForeignKey => 'analysis_chains',
                       });
__PACKAGE__->addColumn(module_id => 'module_id');
__PACKAGE__->addColumn(module => 'module_id',
                       'OME::Module',
                       {
                        SQLType => 'integer',
                        NotNull => 1,
                        Indexed => 1,
                        ForeignKey => 'modules',
                       });
__PACKAGE__->addColumn(iterator_tag => 'iterator_tag',
                       {SQLType => 'varchar(128)'});
__PACKAGE__->addColumn(new_feature_tag => 'new_feature_tag',
                       {SQLType => 'varchar(128)'});
__PACKAGE__->hasMany('input_links',
                     'OME::AnalysisChain::Link' => 'to_node');
__PACKAGE__->hasMany('output_links',
                     'OME::AnalysisChain::Link' => 'from_node');

=head1 METHODS (C<AnalysisView::Node>)

The following methods are available to C<AnalysisView::Node> in
addition to those defined by L<OME::DBObject>.

=head2 analysis_chain

	my $analysis_chain = $node->analysis_chain();
	$node->analysis_chain($analysis_chain);

Returns or sets the module_execution chain that this node belongs to.

=head2 module

	my $module = $node->module();
	$node->module($module);

Returns or sets the module_execution module that this node represents.

=head2 iterator_tag

	my $iterator_tag = $node->iterator_tag();
	$node->iterator_tag($iterator_tag);

Returns or sets the iterator tag for this node.

=head2 new_feature_tag

	my $new_feature_tag = $node->new_feature_tag();
	$node->new_feature_tag($new_feature_tag);

Returns or sets the tag that any new features created by this module
will have.

=head2 input_links

	my @input_links = $node->input_links();
	my $input_link_iterator = $node->input_links();

Returns or iterates, depending on context, the links that provide
input to this node.

=head2 output_links

	my @output_links = $node->output_links();
	my $output_link_iterator = $node->output_links();

Returns or iterates, depending on context, the links that this node
provides output for.

=cut

package OME::AnalysisChain::Link;

use strict;
our $VERSION = 2.000_000;

use OME::DBObject;
use base qw(OME::DBObject);

__PACKAGE__->newClass();
__PACKAGE__->setDefaultTable('analysis_chain_links');
__PACKAGE__->setSequence('analysis_chain_links_seq');
__PACKAGE__->addPrimaryKey('analysis_chain_link_id');
__PACKAGE__->addColumn(analysis_chain_id => 'analysis_chain_id');
__PACKAGE__->addColumn(analysis_chain => 'analysis_chain_id',
                       'OME::AnalysisChain',
                       {
                        SQLType => 'integer',
                        NotNull => 1,
                        Indexed => 1,
                        ForeignKey => 'analysis_chains',
                       });
__PACKAGE__->addColumn(from_node_id => 'from_node');
__PACKAGE__->addColumn(from_node => 'from_node',
                       'OME::AnalysisChain::Node',
                       {
                        SQLType => 'integer',
                        NotNull => 1,
                        Indexed => 1,
                        ForeignKey => 'analysis_chain_nodes',
                       });
__PACKAGE__->addColumn(from_output_id => 'from_output');
__PACKAGE__->addColumn(from_output => 'from_output',
                       'OME::Module::FormalOutput',
                       {
                        SQLType => 'integer',
                        NotNull => 1,
                        Indexed => 1,
                        ForeignKey => 'formal_outputs',
                       });
__PACKAGE__->addColumn(to_node_id => 'to_node');
__PACKAGE__->addColumn(to_node => 'to_node',
                       'OME::AnalysisChain::Node',
                       {
                        SQLType => 'integer',
                        NotNull => 1,
                        Indexed => 1,
                        ForeignKey => 'analysis_chain_nodes',
                       });
__PACKAGE__->addColumn(to_input_id => 'to_input');
__PACKAGE__->addColumn(to_input => 'to_input',
                       'OME::Module::FormalInput',
                       {
                        SQLType => 'integer',
                        NotNull => 1,
                        Indexed => 1,
                        ForeignKey => 'formal_inputs',
                       });

=head1 METHODS (C<AnalysisView::Link>)

The following methods are available to C<AnalysisView::Link> in
addition to those defined by L<OME::DBObject>.

=head2 analysis_chain

	my $analysis_chain = $link->analysis_chain();
	$link->analysis_chain($analysis_chain);

Returns the module_execution chain that this link belongs to.

=head2 from_node

	my $from_node = $link->from_node();
	$link->from_node($from_node);

Returns the node that this link receives data from.

=head2 from_output

	my $from_output = $link->from_output();
	$link->from_output($from_output);

Returns the formal output that this link receives data from.

=head2 to_node

	my $to_node = $link->to_node();
	$link->to_node($to_node);

Returns the node that this link sends data to.

=head2 to_input

	my $to_input = $link->to_input();
	$link->to_input($to_input);

Returns the formal input that this link sends data to.

=cut

1;


__END__

=head1 AUTHOR

Douglas Creager <dcreager@alum.mit.edu>,
Open Microscopy Environment, MIT

=cut

