# OME/ModuleExecution/ActualInput.pm

#-------------------------------------------------------------------------------
#
# Copyright (C) 2003 Open Microscopy Environment
#       Massachusetts Institute of Technology,
#       National Institutes of Health,
#       University of Dundee
#
#
#
#    This library is free software; you can redistribute it and/or
#    modify it under the terms of the GNU Lesser General Public
#    License as published by the Free Software Foundation; either
#    version 2.1 of the License, or (at your option) any later version.
#
#    This library is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    Lesser General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public
#    License along with this library; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#-------------------------------------------------------------------------------




#-------------------------------------------------------------------------------
#
# Written by:    Douglas Creager <dcreager@alum.mit.edu>
#
#-------------------------------------------------------------------------------

package OME::ModuleExecution::ActualInput;

=head1 NAME

C<OME::ModuleExecution::ActualInput> - how an input to an analysis module
was satisfied

The C<ActualInput> class specifies where the values for an analysis
module's inputs came from.  Each of the module's formal inputs has a
single C<ActualInput> for each execution of the module.

The module's input is specified by the C<module_execution> that "feeds" it.
All of the attributes of the formal input's semantic type generated by
the input module_execution are collected and presented as input to the current
analysis.

=cut 

use strict;
use OME;
our $VERSION = $OME::VERSION;

use OME::DBObject;
require OME::Module;
use base qw(OME::DBObject);
use Carp;
use fields qw(_attribute);

__PACKAGE__->newClass();
__PACKAGE__->setDefaultTable('actual_inputs');
__PACKAGE__->setSequence('actual_input_seq');
__PACKAGE__->addPrimaryKey('actual_input_id');
__PACKAGE__->addColumn(module_execution_id => 'module_execution_id');
__PACKAGE__->addColumn(module_execution => 'module_execution_id',
                       'OME::ModuleExecution',
                       {
                        SQLType => 'integer',
                        NotNull => 1,
                        Indexed => 1,
                        ForeignKey => 'module_executions',
                       });
__PACKAGE__->addColumn(formal_input_id => 'formal_input_id');
__PACKAGE__->addColumn(formal_input => 'formal_input_id',
                       'OME::Module::FormalInput',
                       {
                        SQLType => 'integer',
                        NotNull => 1,
                        Indexed => 1,
                        ForeignKey => 'formal_inputs',
                       });
__PACKAGE__->addColumn(input_module_execution_id => 'input_module_execution_id');
__PACKAGE__->addColumn(input_module_execution => 'input_module_execution_id',
                       'OME::ModuleExecution',
                       {
                        SQLType => 'integer',
                        NotNull => 1,
                        Indexed => 1,
                        ForeignKey => 'module_executions',
                       });


__PACKAGE__->addPseudoColumn('formal_output','has-one',
			     'OME::Module::FormalOutput');



=head1 METHODS (C<ActualInput>)

The following methods are available to C<ActualInput> in addition to
those defined by L<OME::DBObject>.

=head2 module_execution

	my $module_execution = $input->module_execution();
	$input->module_execution($module_execution);

Returns the module_execution that this actual input is associated with.

=head2 input_module_execution

	my $input_module_execution = $input->input_module_execution();
	$input->input_module_execution($input_module_execution);

Returns the module_execution that provides this actual input with data.

=head2 formal_input

	my $formal_input = $input->formal_input();
	$input->formal_input($formal_input);

Returns the formal input that this actual input provides data for.

=head2 formal_output

        my $formal_output = $input->formal_output();

Returns the formal output of the input module (ie., the module that
was executed to produce input_module_execution) that provided the
input to the formal_input.

Note that this procedure does not have a "setter" mode. 

=cut


sub  formal_output {
    my $self = shift;


    # first, look, at the outputs of the input module, 
    # if there is one with a semantic type that matches the
    # semantic_type of the formal input, that's the one we're looking
    # for.

    my $st = $self->formal_input()->semantic_type();
    my $inputModule = $self->input_module_execution()->module();
    my $outst;
    
    my $outputs = $inputModule->outputs();
    while (my $output = $outputs->next()) {
	$outst = $output->semantic_type();
        next unless (defined $outst);
	return $output if ($outst->ID() == $st->ID()); # sts are the same
    }

    # if we've gotten to this point, there is no direct st output
    # that corresponds. Try to find a semantic_type_output


    
    # first, look for  untyped outputs of input module

    my $semanticTypeOutputs = $self->input_module_execution()->untypedOutputs();

    # then, of all of those, look for an entry of the right type.
    while (my $semanticTypeOutput = $semanticTypeOutputs->next()) {
	$outst = $semanticTypeOutput->semantic_type();
	next unless (defined $outst);
	if ($outst->ID() == $st->ID()) {
	    # got the right st. now, find the right output. of the module.
	    my $outputs = $inputModule->outputs();
	    while (my $output = $outputs->next()) {
		return $output if (!(defined $output->semantic_type_id()));
	    }
	}
    }

    # couldn't find anything.
    return undef;

}

1;

__END__

=head1 AUTHOR

Douglas Creager <dcreager@alum.mit.edu>,
Open Microscopy Environment, MIT

=cut
