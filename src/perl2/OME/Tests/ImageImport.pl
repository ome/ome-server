#!/usr/bin/perl -w
# OME/Tests/ImportTest.pl

#-------------------------------------------------------------------------------
#
# Copyright (C) 2003 Open Microscopy Environment
#       Massachusetts Institute of Technology,
#       National Institutes of Health,
#       University of Dundee
#
#
#
#    This library is free software; you can redistribute it and/or
#    modify it under the terms of the GNU Lesser General Public
#    License as published by the Free Software Foundation; either
#    version 2.1 of the License, or (at your option) any later version.
#
#    This library is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
#    Lesser General Public License for more details.
#
#    You should have received a copy of the GNU Lesser General Public
#    License along with this library; if not, write to the Free Software
#    Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
#
#-------------------------------------------------------------------------------




#-------------------------------------------------------------------------------
#
# Written by:    Douglas Creager <dcreager@alum.mit.edu>
#
#-------------------------------------------------------------------------------


#!/usr/bin/perl -w
use strict;

use OME::SessionManager;
use OME::Session;
use OME::Tasks::ProjectManager;
use OME::Tasks::ImageTasks;

use Log::Agent;
use Getopt::Long;
Getopt::Long::Configure("bundling");

my $reuse = '';
my $debug = 0;
my $help = 0;

GetOptions('reimport|r!' => \$reuse,
		   'verbose|v' => \$debug,
           'help|h' => \$help);

sub usage {
    print <<"USAGE";

ImportEngine.pl [options] [import dataset name] [list of files]

Imports some proprietary image files into an OME database, and runs
the import analysis chain against those images.

Options:
  -r, --reimport   Reimports images which are already in the database.  This should
                   only be used for testing purposes.
      
  -v, --verbose    Debugging information is printed.

  -h, --help       Print this help message.
  
USAGE
    CORE::exit(1);
}

if ($help || scalar(@ARGV) <= 0) {
    usage();
}

my $manager = OME::SessionManager->new();
my $session = $manager->TTYlogin();
my $factory = $session->Factory();

# Get command Line params
my ($datasetName, @file_names) = @ARGV;

# Get a dataset.
# The dataset name on the command line either matches an existing
# unlocked dataset owned by the current user, or is the name of a new
# dataset.
# Either way, we must associate the dataset with the current project.
my $dataset_data = {
	name   => $datasetName,
	owner  => $session->User(),
	locked => 'false'
};
my $dataset = $factory->findObject( "OME::Dataset", $dataset_data);
$dataset = $factory->newObject( "OME::Dataset", $dataset_data )
	unless $dataset;
$session->dataset( $dataset );
$session->storeObject();

# Now Get a project
my $project = $session->project();
if (not defined $project) {
    print "- Creating a new project...\n";
    $project = $factory->newObject("OME::Project", {
		name => 'Test Project',
		description => 'This project was auto generated by a test script',
		owner => $session->User(),
		group => $session->User()->Group()
	}) or die "Couldn't make a project";
}

# Assign the dataset to the project
my $projectManager = new OME::Tasks::ProjectManager;
$projectManager->addDatasets([ $dataset->id() ], $project->id());

$session->commitTransaction();

my %opts;
$opts{AllowDuplicates} = 1 if $reuse;
if ( $debug or (exists $ENV{OME_DEBUG} and $ENV{OME_DEBUG} > 0)) {
	logconfig(
		-prefix => "$0",
		-level => 'debug'
	);
}

print "Importing files\n";
my $images = OME::Tasks::ImageTasks::importFiles($dataset, \@file_names, \%opts);

print "\n\nSuccessfully imported images:\n";

foreach my $image (@$images) {
    print $image->id(),": ",$image->name(),"\n";
}
